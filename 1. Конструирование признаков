{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/namespaceStedd/machinelearning/blob/main/1.%20%D0%9A%D0%BE%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%BF%D1%80%D0%B8%D0%B7%D0%BD%D0%B0%D0%BA%D0%BE%D0%B2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Лабораторная работа \"Конструирование признаков\""
      ],
      "metadata": {
        "id": "TC1OBmllCXrK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Работу выполнил студент группы ФИТ-23 НМ Филиппов Александр**"
      ],
      "metadata": {
        "id": "uoVJfSPNBXPM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Постановка задачи"
      ],
      "metadata": {
        "id": "urJg51piCeRN"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Контекст\n",
        "Набор данных состоит из списков 540 тысяч уникальных объектов недвижимости из популярных порталов по продаже недвижимости в России."
      ],
      "metadata": {
        "id": "eIOFaGW57_9U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Описание\n",
        "Российский рынок недвижимости имеет относительно короткую историю. В советское время вся недвижимость принадлежала государству, и люди могли пользоваться только квартирами, выделенными по месту работы. В результате возможности для переезда были довольно ограничены. Однако после распада Советского Союза появился российский рынок недвижимости, и москвичи впервые смогли приватизировать, а затем продавать и покупать недвижимость. Сегодня российский рынок недвижимости процветает. Он предлагает множество интересных возможностей и высокую прибыль для образа жизни и инвестиций.\n",
        "Рынок недвижимости уже несколько лет находится в фазе роста, а это значит, что вы всё ещё можете найти недвижимость по очень привлекательным ценам, но с хорошими шансами на повышение её стоимости в будущем.\n"
      ],
      "metadata": {
        "id": "yx7IJj2n8Sfx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Набор данных\n",
        "Набор данных состоит из 13 полей:\n",
        "1. **date:** дата публикации объявления.\n",
        "2. **time:** время публикации объявления.\n",
        "3. **geo_lat:** широта.\n",
        "4. **geo_lon:** долгота.\n",
        "5. **region:** субъект Российской Федерации. Всего в стране 85 субъектов.\n",
        "6. **building_type:** тип фасада. *Другой* (0), *Панельный* (1), *Монолитный* (2), *Кирпичный* (3), *Блочный* (4), *Деревянный* (5).\n",
        "7. **object_type:** тип квартиры. *Вторичный рынок недвижимости* (1) и *Новостройка* (2).\n",
        "8. **level:** этаж квартиры.\n",
        "9. **levels:** количество этажей.\n",
        "10. **rooms:** количество жилых комнат. Если значение равно «-1», то это означает «квартира-студия».\n",
        "11. **area:** общая площадь квартиры.\n",
        "12. **kitchen_area:** кухонная зона.\n",
        "13. **price:** цена в рублях."
      ],
      "metadata": {
        "id": "fehqwNSblynh"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Использование\n",
        "Датасет может быть использован для анализа среднерыночной стоимости квартир по отдельно взятым регионам."
      ],
      "metadata": {
        "id": "Bg8r3UaQl2uV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Ссылка на источник\n",
        "Датасет взят из источника по следующей ссылке: [Russia Real Estate 2018-2021](https://www.kaggle.com/datasets/mrdaniilak/russia-real-estate-20182021)."
      ],
      "metadata": {
        "id": "xDvqcsIxl6Eb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Цель\n",
        "Вспомнить методы анализа ожидаемого показателя объекта по его остальным признакам, используя средства машинного обучения, а также изучить новые методы анализа данных на языке Python."
      ],
      "metadata": {
        "id": "K4FS-6nLl_4B"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Задачи\n",
        "\n",
        "1. Выбрать интересующий набор данных (Russia Real Estate 2018-2021), выполняя требования к набору: минимум 5 признаков, наличие пропусков в данных и наличие минимум одного категориального признака, который закодирован текстовыми значениями.\n",
        "\n",
        "2. Описать задачу и набор данных.\n",
        "\n",
        "3. Обогатить выбранный набор новыми данными из интернет источников.\n",
        "* *Например, данные о недвижимости можно дополнить данными о расстоянии до какого-нибудь вида ближайщих объектов: центр города, метро, социальный объект, транспорт и т.д.*\n",
        "* *Создать новые признаки на основании существующих с помощью выполнения функций, например, факт первого/последнего этажа на основании номера этажа и общего количества этажей в здании.*\n",
        "\n",
        "4. Выбрать важные признаки, модицифировать признаки, удалить лишние признаки. Удалить/заменить пробелы данных. Провести нужные преобразования.\n",
        "\n",
        "5. Визуализировать данные с учётом требований оформления графиков (приведены в блокноте по графическому представлению) в виде информационной/аналитической панели **из минимум 3х элементов**.\n",
        "Единицы измерения, подписи, одна палитра, один стиль оформления.\n",
        "Например, 2 графика различного типа и таблица характеристик/примеров/показателей.\n",
        "Минимум 1 элемент управления. В отчёте или отчётном блокноте привести минимум 2 снимка панели с различными значениями параметров.\n",
        "\n",
        "6. Написать заключение.\n",
        "Достигнуты ли цели, выполнены ли задачи, новые навыки/умения/знания.\n",
        "Обратная связь: отзывы, предложения.\n",
        "\n",
        "7. Отправить блокнот в формате ipynb на почту преподавателю (iseletkov@gmail.com) с заголовоком \"название дисциплины - № работы\"."
      ],
      "metadata": {
        "id": "Xto4CDwD-k6y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Недвижимость в России 2018-2021"
      ],
      "metadata": {
        "id": "kFwK_fD3Ckeo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Загрузка данных"
      ],
      "metadata": {
        "id": "tzNOsVLHTkH2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Импорт библиотек\n",
        "import numpy;\n",
        "import pandas;\n",
        "import matplotlib.pyplot as plot;\n",
        "import seaborn;"
      ],
      "metadata": {
        "id": "EWeWK-4Juhn6"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Функция опционального импорта.\n",
        "# Передаём строку с форматом файла или ссылку.\n",
        "# В зависимости от этого программа будет выбирать способ извлечения датасета.\n",
        "def optional_import(file):\n",
        "  if '.' not in file:\n",
        "    url = 'https://docs.google.com/spreadsheets/d/' + file + '/export?format=csv';\n",
        "    return pandas.read_csv(url);\n",
        "  else:\n",
        "    from google.colab import drive;\n",
        "    drive.mount('/content/gdrive/')\n",
        "    return pandas.read_csv('/content/gdrive/MyDrive/Colab Notebooks/' + file);\n",
        "\n",
        "\n",
        "\n",
        "# Опционально выбираем, как хотим импортировать:\n",
        "# Ссылка: не сформирована, файл большой и открыться не может\n",
        "# Файл, начиная с репозитория блокнотов: Bean Machine/lab.1/russia_real_estate.csv\n",
        "apartments = optional_import('Bean Machine/lab.1/russia_real_estate.csv');\n",
        "apartments.head()\n"
      ],
      "metadata": {
        "id": "49o0m3SzTmxp",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "outputId": "87f58b86-c01a-40c8-c416-e0cf55a3758e"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive/\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     price        date      time    geo_lat    geo_lon  region  building_type  \\\n",
              "0  6050000  2018-02-19  20:00:21  59.805808  30.376141      78              1   \n",
              "1  8650000  2018-02-27  12:04:54  55.683807  37.297405      50              3   \n",
              "2  4000000  2018-02-28  15:44:00  56.295250  44.061637      52              1   \n",
              "3  1850000  2018-03-01  11:24:52  44.996132  39.074783      23              4   \n",
              "4  5450000  2018-03-01  17:42:43  55.918767  37.984642      50              3   \n",
              "\n",
              "   level  levels  rooms  area  kitchen_area  object_type  \n",
              "0      8      10      3  82.6          10.8            1  \n",
              "1      5      24      2  69.1          12.0            1  \n",
              "2      5       9      3  66.0          10.0            1  \n",
              "3     12      16      2  38.0           5.0           11  \n",
              "4     13      14      2  60.0          10.0            1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f27bb525-f257-4227-817c-707d10f9c290\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>time</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>region</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6050000</td>\n",
              "      <td>2018-02-19</td>\n",
              "      <td>20:00:21</td>\n",
              "      <td>59.805808</td>\n",
              "      <td>30.376141</td>\n",
              "      <td>78</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>3</td>\n",
              "      <td>82.6</td>\n",
              "      <td>10.8</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>8650000</td>\n",
              "      <td>2018-02-27</td>\n",
              "      <td>12:04:54</td>\n",
              "      <td>55.683807</td>\n",
              "      <td>37.297405</td>\n",
              "      <td>50</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>24</td>\n",
              "      <td>2</td>\n",
              "      <td>69.1</td>\n",
              "      <td>12.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4000000</td>\n",
              "      <td>2018-02-28</td>\n",
              "      <td>15:44:00</td>\n",
              "      <td>56.295250</td>\n",
              "      <td>44.061637</td>\n",
              "      <td>52</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>66.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1850000</td>\n",
              "      <td>2018-03-01</td>\n",
              "      <td>11:24:52</td>\n",
              "      <td>44.996132</td>\n",
              "      <td>39.074783</td>\n",
              "      <td>23</td>\n",
              "      <td>4</td>\n",
              "      <td>12</td>\n",
              "      <td>16</td>\n",
              "      <td>2</td>\n",
              "      <td>38.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5450000</td>\n",
              "      <td>2018-03-01</td>\n",
              "      <td>17:42:43</td>\n",
              "      <td>55.918767</td>\n",
              "      <td>37.984642</td>\n",
              "      <td>50</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>14</td>\n",
              "      <td>2</td>\n",
              "      <td>60.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f27bb525-f257-4227-817c-707d10f9c290')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f27bb525-f257-4227-817c-707d10f9c290 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f27bb525-f257-4227-817c-707d10f9c290');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9e520fd5-606d-490c-810e-e35b79fb3edc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9e520fd5-606d-490c-810e-e35b79fb3edc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9e520fd5-606d-490c-810e-e35b79fb3edc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "apartments"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Фильтрация нужных данных\n",
        "Выбранная область: Кёнигсбергская (ныне Калининградская) область."
      ],
      "metadata": {
        "id": "7ai2XMyTTsMt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Königsberg = apartments.loc[apartments['region'] == 39];\n",
        "Königsberg"
      ],
      "metadata": {
        "id": "fFFKyfXfT5mi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "0c35c488-ac10-485f-8ce7-5a263a4d5b3e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            price        date      time    geo_lat    geo_lon  region  \\\n",
              "598570    3000000  2018-11-29  11:37:42  54.659968  19.915666      39   \n",
              "598607    4900000  2018-11-29  11:40:18  54.723534  20.470695      39   \n",
              "598668    3650000  2018-11-29  11:44:10  54.723444  20.471314      39   \n",
              "598698    2600000  2018-11-29  11:46:03  54.729801  20.004793      39   \n",
              "599049    1900000  2018-11-29  12:08:15  54.733997  20.467265      39   \n",
              "...           ...         ...       ...        ...        ...     ...   \n",
              "5475777   3334600  2021-05-01  17:24:45  54.707470  20.507324      39   \n",
              "5475818  10500000  2021-05-01  17:33:44  54.716945  20.482889      39   \n",
              "5476873   5900000  2021-05-01  19:48:37  54.711222  20.574834      39   \n",
              "5476901   2593200  2021-05-01  19:52:41  54.707470  20.507324      39   \n",
              "5476929   3372120  2021-05-01  19:59:40  54.707470  20.507324      39   \n",
              "\n",
              "         building_type  level  levels  rooms  area  kitchen_area  object_type  \n",
              "598570               3      2       2      3  84.8          14.5            1  \n",
              "598607               3      1       3      3  79.6           8.9            1  \n",
              "598668               3      4       5      2  61.0          15.2            1  \n",
              "598698               4      5       5      3  62.0          14.0            1  \n",
              "599049               4      1       5      2  44.0           6.0            1  \n",
              "...                ...    ...     ...    ...   ...           ...          ...  \n",
              "5475777              3      2      10      1  48.0          21.0           11  \n",
              "5475818              2      9      10      2  90.0          27.8            1  \n",
              "5476873              3      9      12      2  56.0          10.0            1  \n",
              "5476901              2      9      10      1  43.0           8.6           11  \n",
              "5476929              2      5      10      2  59.0           9.6           11  \n",
              "\n",
              "[39349 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c5365ba-db34-4784-b08f-c1e08b85581e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>time</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>region</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>598570</th>\n",
              "      <td>3000000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>11:37:42</td>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>39</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>84.8</td>\n",
              "      <td>14.5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598607</th>\n",
              "      <td>4900000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>11:40:18</td>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>39</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>79.6</td>\n",
              "      <td>8.9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598668</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>11:44:10</td>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>39</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598698</th>\n",
              "      <td>2600000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>11:46:03</td>\n",
              "      <td>54.729801</td>\n",
              "      <td>20.004793</td>\n",
              "      <td>39</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>62.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599049</th>\n",
              "      <td>1900000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>12:08:15</td>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>39</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475777</th>\n",
              "      <td>3334600</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>17:24:45</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>39</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>48.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475818</th>\n",
              "      <td>10500000</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>17:33:44</td>\n",
              "      <td>54.716945</td>\n",
              "      <td>20.482889</td>\n",
              "      <td>39</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>90.0</td>\n",
              "      <td>27.8</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476873</th>\n",
              "      <td>5900000</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>19:48:37</td>\n",
              "      <td>54.711222</td>\n",
              "      <td>20.574834</td>\n",
              "      <td>39</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>56.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476901</th>\n",
              "      <td>2593200</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>19:52:41</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>39</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>8.6</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476929</th>\n",
              "      <td>3372120</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>19:59:40</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>39</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>59.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>39349 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c5365ba-db34-4784-b08f-c1e08b85581e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2c5365ba-db34-4784-b08f-c1e08b85581e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2c5365ba-db34-4784-b08f-c1e08b85581e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5bc6c226-bbfa-4d4b-8fdb-e14d61ecf5a5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5bc6c226-bbfa-4d4b-8fdb-e14d61ecf5a5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5bc6c226-bbfa-4d4b-8fdb-e14d61ecf5a5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Königsberg",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "В данном наборе не так уж много записей, однако нужно избавиться от лишних параметров.\n",
        "\n",
        "Теперь, поскольку выбран один регион, поле \"region\" является избыточным и не несёт никакой полезной информации.\n",
        "\n",
        "Время размещения объявления также можно сократить, поскольку этот параметр в течение дня сильно на стоимость квартиры вряд ли бы повлиял.\n",
        "\n",
        "Также можно сократить дату размещения, оставив, например, только год размещения."
      ],
      "metadata": {
        "id": "IRa42_5u2ICq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Удаление устаревших параметров\n",
        "Königsberg = Königsberg.drop(columns=['region', 'time']);\n",
        "Königsberg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "X-ztDFO222W_",
        "outputId": "7eb90cbd-5f74-4e3e-d0b2-c814cb0d9f84"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            price        date    geo_lat    geo_lon  building_type  level  \\\n",
              "598570    3000000  2018-11-29  54.659968  19.915666              3      2   \n",
              "598607    4900000  2018-11-29  54.723534  20.470695              3      1   \n",
              "598668    3650000  2018-11-29  54.723444  20.471314              3      4   \n",
              "598698    2600000  2018-11-29  54.729801  20.004793              4      5   \n",
              "599049    1900000  2018-11-29  54.733997  20.467265              4      1   \n",
              "...           ...         ...        ...        ...            ...    ...   \n",
              "5475777   3334600  2021-05-01  54.707470  20.507324              3      2   \n",
              "5475818  10500000  2021-05-01  54.716945  20.482889              2      9   \n",
              "5476873   5900000  2021-05-01  54.711222  20.574834              3      9   \n",
              "5476901   2593200  2021-05-01  54.707470  20.507324              2      9   \n",
              "5476929   3372120  2021-05-01  54.707470  20.507324              2      5   \n",
              "\n",
              "         levels  rooms  area  kitchen_area  object_type  \n",
              "598570        2      3  84.8          14.5            1  \n",
              "598607        3      3  79.6           8.9            1  \n",
              "598668        5      2  61.0          15.2            1  \n",
              "598698        5      3  62.0          14.0            1  \n",
              "599049        5      2  44.0           6.0            1  \n",
              "...         ...    ...   ...           ...          ...  \n",
              "5475777      10      1  48.0          21.0           11  \n",
              "5475818      10      2  90.0          27.8            1  \n",
              "5476873      12      2  56.0          10.0            1  \n",
              "5476901      10      1  43.0           8.6           11  \n",
              "5476929      10      2  59.0           9.6           11  \n",
              "\n",
              "[39349 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-962125b1-e2f0-466f-92b4-1e71db4d4c53\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>598570</th>\n",
              "      <td>3000000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>84.8</td>\n",
              "      <td>14.5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598607</th>\n",
              "      <td>4900000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>79.6</td>\n",
              "      <td>8.9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598668</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598698</th>\n",
              "      <td>2600000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>54.729801</td>\n",
              "      <td>20.004793</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>62.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599049</th>\n",
              "      <td>1900000</td>\n",
              "      <td>2018-11-29</td>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475777</th>\n",
              "      <td>3334600</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>48.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475818</th>\n",
              "      <td>10500000</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>54.716945</td>\n",
              "      <td>20.482889</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>90.0</td>\n",
              "      <td>27.8</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476873</th>\n",
              "      <td>5900000</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>54.711222</td>\n",
              "      <td>20.574834</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>56.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476901</th>\n",
              "      <td>2593200</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>8.6</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476929</th>\n",
              "      <td>3372120</td>\n",
              "      <td>2021-05-01</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>59.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>39349 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-962125b1-e2f0-466f-92b4-1e71db4d4c53')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-962125b1-e2f0-466f-92b4-1e71db4d4c53 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-962125b1-e2f0-466f-92b4-1e71db4d4c53');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-25c117fc-22c0-4564-89ba-580fe2fb3f84\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-25c117fc-22c0-4564-89ba-580fe2fb3f84')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-25c117fc-22c0-4564-89ba-580fe2fb3f84 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Königsberg",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Замена даты публикации на год\n",
        "def date_replace(table, field):\n",
        "  table_replaced = table.copy();\n",
        "  for i, row in table_replaced.iterrows():\n",
        "    date = table_replaced.at[i, field];\n",
        "    if type(date) == str:\n",
        "      table_replaced.at[i, field] = date.split('-')[0];\n",
        "  return table_replaced;\n",
        "\n",
        "\n",
        "# Применение новейшних технологий\n",
        "Königsberg = date_replace(Königsberg, 'date');\n",
        "Königsberg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "NfMQZ2Dy3pzr",
        "outputId": "3eca546e-0849-439e-82d8-f9ea3f54ee86"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            price  date    geo_lat    geo_lon  building_type  level  levels  \\\n",
              "598570    3000000  2018  54.659968  19.915666              3      2       2   \n",
              "598607    4900000  2018  54.723534  20.470695              3      1       3   \n",
              "598668    3650000  2018  54.723444  20.471314              3      4       5   \n",
              "598698    2600000  2018  54.729801  20.004793              4      5       5   \n",
              "599049    1900000  2018  54.733997  20.467265              4      1       5   \n",
              "...           ...   ...        ...        ...            ...    ...     ...   \n",
              "5475777   3334600  2021  54.707470  20.507324              3      2      10   \n",
              "5475818  10500000  2021  54.716945  20.482889              2      9      10   \n",
              "5476873   5900000  2021  54.711222  20.574834              3      9      12   \n",
              "5476901   2593200  2021  54.707470  20.507324              2      9      10   \n",
              "5476929   3372120  2021  54.707470  20.507324              2      5      10   \n",
              "\n",
              "         rooms  area  kitchen_area  object_type  \n",
              "598570       3  84.8          14.5            1  \n",
              "598607       3  79.6           8.9            1  \n",
              "598668       2  61.0          15.2            1  \n",
              "598698       3  62.0          14.0            1  \n",
              "599049       2  44.0           6.0            1  \n",
              "...        ...   ...           ...          ...  \n",
              "5475777      1  48.0          21.0           11  \n",
              "5475818      2  90.0          27.8            1  \n",
              "5476873      2  56.0          10.0            1  \n",
              "5476901      1  43.0           8.6           11  \n",
              "5476929      2  59.0           9.6           11  \n",
              "\n",
              "[39349 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c29d49a3-0a66-41c5-bcf8-9d9750b23178\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>598570</th>\n",
              "      <td>3000000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>84.8</td>\n",
              "      <td>14.5</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598607</th>\n",
              "      <td>4900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>79.6</td>\n",
              "      <td>8.9</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598668</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598698</th>\n",
              "      <td>2600000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.729801</td>\n",
              "      <td>20.004793</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>62.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599049</th>\n",
              "      <td>1900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475777</th>\n",
              "      <td>3334600</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>48.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475818</th>\n",
              "      <td>10500000</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.716945</td>\n",
              "      <td>20.482889</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>90.0</td>\n",
              "      <td>27.8</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476873</th>\n",
              "      <td>5900000</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.711222</td>\n",
              "      <td>20.574834</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>56.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476901</th>\n",
              "      <td>2593200</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>8.6</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476929</th>\n",
              "      <td>3372120</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>59.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>11</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>39349 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c29d49a3-0a66-41c5-bcf8-9d9750b23178')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c29d49a3-0a66-41c5-bcf8-9d9750b23178 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c29d49a3-0a66-41c5-bcf8-9d9750b23178');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-547fccb1-4461-47f7-a9a2-52a807c2c792\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-547fccb1-4461-47f7-a9a2-52a807c2c792')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-547fccb1-4461-47f7-a9a2-52a807c2c792 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Königsberg",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Присмотревшись внимательно в набор данных, можно заметить, что поле \"object_type\" конкретно не удовлетворяет описанию полей данных. В них сказано:\n",
        "\n",
        "7. **object_type:** тип квартиры. *Вторичный рынок недвижимости* (1) и *Новостройка* (2).\n",
        "\n",
        "Откуда взялось число 11? Рассмотрим уникальные значения поля..."
      ],
      "metadata": {
        "id": "xvSAqHc1C0cu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "unique_object_type = Königsberg['object_type'].unique();\n",
        "print('Уникальные значения:', unique_object_type);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9qE3MiP6DSlg",
        "outputId": "d4129d8a-c820-455b-cf66-9aa9b88e3308"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Уникальные значения: [ 1 11]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Действительно, в наборе данных опять что-то напутали!\n",
        "\n",
        "Однако, не всё так просто: нам недостаточно просто поменять **11** на **2**... Нужно убедиться в верности суждения в зависимости от описания поля!\n",
        "\n",
        "Проверив запись №5475818, где **\"object_type = 1\"** и запись №599469, где **\"object_type = 11\"** по Яндекс.Картам, я убедился, что и тут данные напутаны, но в квадрате! Открыв панораму, я обнаружил, что дом с **\"object_type = 1\"** выглядит как новый, тем временем **\"object_type = 11\"** обычная советская пятиэтажка!!!\n",
        "\n",
        "Получается, что корректной заменой будут следующие комбинации:\n",
        "1. object_type = 11 заменяем на object_type = 1;\n",
        "2. object_type = 1 заменяем на object_type = 2."
      ],
      "metadata": {
        "id": "JCjlVv55DR7w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Функция замены данных в наборе\n",
        "def shift_field(table, field, rule):\n",
        "  shifted = table.copy();\n",
        "  shifted[field] = shifted[field].replace(rule);\n",
        "  return shifted;\n",
        "\n",
        "\n",
        "# Корректизация данных\n",
        "shift = { 11: 1, 1: 2 };\n",
        "Königsberg = shift_field(Königsberg, 'object_type', shift);\n",
        "Königsberg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "rN1-s9b2D2S5",
        "outputId": "ffa44ba3-f15e-403c-c7f5-b4bdf8be745e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            price  date    geo_lat    geo_lon  building_type  level  levels  \\\n",
              "598570    3000000  2018  54.659968  19.915666              3      2       2   \n",
              "598607    4900000  2018  54.723534  20.470695              3      1       3   \n",
              "598668    3650000  2018  54.723444  20.471314              3      4       5   \n",
              "598698    2600000  2018  54.729801  20.004793              4      5       5   \n",
              "599049    1900000  2018  54.733997  20.467265              4      1       5   \n",
              "...           ...   ...        ...        ...            ...    ...     ...   \n",
              "5475777   3334600  2021  54.707470  20.507324              3      2      10   \n",
              "5475818  10500000  2021  54.716945  20.482889              2      9      10   \n",
              "5476873   5900000  2021  54.711222  20.574834              3      9      12   \n",
              "5476901   2593200  2021  54.707470  20.507324              2      9      10   \n",
              "5476929   3372120  2021  54.707470  20.507324              2      5      10   \n",
              "\n",
              "         rooms  area  kitchen_area  object_type  \n",
              "598570       3  84.8          14.5            2  \n",
              "598607       3  79.6           8.9            2  \n",
              "598668       2  61.0          15.2            2  \n",
              "598698       3  62.0          14.0            2  \n",
              "599049       2  44.0           6.0            2  \n",
              "...        ...   ...           ...          ...  \n",
              "5475777      1  48.0          21.0            1  \n",
              "5475818      2  90.0          27.8            2  \n",
              "5476873      2  56.0          10.0            2  \n",
              "5476901      1  43.0           8.6            1  \n",
              "5476929      2  59.0           9.6            1  \n",
              "\n",
              "[39349 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-130f59ba-e949-4f34-926f-92cb7d1dd0a1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>598570</th>\n",
              "      <td>3000000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>84.8</td>\n",
              "      <td>14.5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598607</th>\n",
              "      <td>4900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>79.6</td>\n",
              "      <td>8.9</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598668</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598698</th>\n",
              "      <td>2600000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.729801</td>\n",
              "      <td>20.004793</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>3</td>\n",
              "      <td>62.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599049</th>\n",
              "      <td>1900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>2</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475777</th>\n",
              "      <td>3334600</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>48.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475818</th>\n",
              "      <td>10500000</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.716945</td>\n",
              "      <td>20.482889</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>90.0</td>\n",
              "      <td>27.8</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476873</th>\n",
              "      <td>5900000</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.711222</td>\n",
              "      <td>20.574834</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>2</td>\n",
              "      <td>56.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476901</th>\n",
              "      <td>2593200</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>8.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476929</th>\n",
              "      <td>3372120</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>59.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>39349 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-130f59ba-e949-4f34-926f-92cb7d1dd0a1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-130f59ba-e949-4f34-926f-92cb7d1dd0a1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-130f59ba-e949-4f34-926f-92cb7d1dd0a1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aea2da9d-bbce-40ce-b469-72cadecaa9dc\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aea2da9d-bbce-40ce-b469-72cadecaa9dc')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aea2da9d-bbce-40ce-b469-72cadecaa9dc button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Königsberg",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Таким образом, мы определили корректный тип объекта в каждой строке данных. Это нам сильно поможет в будущем..."
      ],
      "metadata": {
        "id": "_EvkjtzWH3Y_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Удаление выбросов\n",
        "Удалим выбросы, присутствующие в наборе данных, по полю \"price\" стоимости квартиры."
      ],
      "metadata": {
        "id": "g4D9O3a5TmMd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Функция для построения графиков по одному алгоритму\n",
        "def plotix(data, field_x, field_y, plot_type):\n",
        "  plot.figure(figsize=(12,8));\n",
        "  colors = ['limegreen', 'midnight blue', 'salmon'];\n",
        "\n",
        "  match plot_type:\n",
        "    case 'scatter':\n",
        "      plot.scatter(data[field_x], data[field_y], color = colors[0]);\n",
        "    case 'line':\n",
        "      seaborn.lineplot(x = field_x, y = field_y, data = data, color = colors[0]);\n",
        "    case 'bar':\n",
        "      seaborn.barplot(x = field_x, y = field_y, data = data, color = colors[0]);\n",
        "      # plot.bar(x = data[field_x], y = data[field_y], height = 10, color = colors[0]);\n",
        "    case 'boxplot':\n",
        "      seaborn.boxplot(y = field_y, color = colors[0], data = data);\n",
        "    case _:\n",
        "      plot.scatter(data[field_x], data[field_y], color = colors[0]);\n",
        "\n",
        "  # for color, i, target_name in zip(colors, replacement, cluster_columns):\n",
        "  #   plot.scatter(x_new[y == i, 0], x_new[y == i, 1], color=color, alpha=0.8, lw=2, label=classes[i]);\n",
        "\n",
        "  plot.legend(loc='best', shadow=False, scatterpoints=1);\n",
        "  plot.title(field_x + ' / ' + field_y);\n",
        "  plot.xlabel(field_x);\n",
        "  plot.ylabel(field_y);\n",
        "  plot.show();\n",
        "\n",
        "\n",
        "# Построение ящика с усами\n",
        "plotix(Königsberg, 'date', 'price', 'boxplot');"
      ],
      "metadata": {
        "id": "sc9eImNpYllM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 759
        },
        "outputId": "5cafca4f-6d39-4b39-e8f1-50004408c67e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-921c4b1e9fc0>:22: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plot.legend(loc='best', shadow=False, scatterpoints=1);\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Становится очевидным, что выбросы слишком велики, что график \"Ящик с усами\" становится сильно сплющенным. Убедимся в этом, определив уникальные для поля \"price\" величины."
      ],
      "metadata": {
        "id": "0c5dky0msPTa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Определение уникальных значений для поля \"price\"\n",
        "unique_prices = Königsberg['price'].unique();\n",
        "print('Уникальные значения:', unique_prices);\n",
        "print('Максимальная стоимость квартиры:', max(unique_prices));\n",
        "print('Минимальная стоимость квартиры:', min(unique_prices));"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Tum9I_Y-scLS",
        "outputId": "0b66015e-44b3-4a78-fee0-4455941819ec"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Уникальные значения: [3000000 4900000 3650000 ... 4932000 3698000 3334600]\n",
            "Максимальная стоимость квартиры: 1285032704\n",
            "Минимальная стоимость квартиры: -1129967296\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Становится очевидным, что стоимость квартиры не может быть меньше нуля. Её отдают с приданным? Определим \"битые\" записи..."
      ],
      "metadata": {
        "id": "KVut5WYOtEb9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Определение некорректных записей\n",
        "def incorrect_data(table, field, delete):\n",
        "  correct_table = table.copy();\n",
        "  for i, row in correct_table.iterrows():\n",
        "    broken_data = correct_table.at[i, field];\n",
        "    if (broken_data < 0):\n",
        "      print(row);\n",
        "      if (delete):\n",
        "        correct_table = correct_table.drop(i);\n",
        "  return correct_table;\n",
        "\n",
        "\n",
        "# Вывести некорректные данные на экран\n",
        "incorrect_data(Königsberg, 'price', False);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mHAWkw0StLSp",
        "outputId": "eda3eaf6-2d8d-4d20-b274-2ca5c5c82bce"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "price            -939934592\n",
            "date                   2020\n",
            "geo_lat             54.7131\n",
            "geo_lon           20.466827\n",
            "building_type             3\n",
            "level                     2\n",
            "levels                    4\n",
            "rooms                     2\n",
            "area                   73.3\n",
            "kitchen_area           12.1\n",
            "object_type               2\n",
            "Name: 3464709, dtype: object\n",
            "price            -1129967296\n",
            "date                    2020\n",
            "geo_lat            54.741692\n",
            "geo_lon            20.477229\n",
            "building_type              3\n",
            "level                      2\n",
            "levels                     4\n",
            "rooms                      1\n",
            "area                    36.6\n",
            "kitchen_area            12.1\n",
            "object_type                2\n",
            "Name: 4549187, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Стало очевидным, что две некорректные записи портят весь датаест. Удалим их и выведем график снова."
      ],
      "metadata": {
        "id": "lcr53LE2u_Fa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Удаление некорректных данных\n",
        "Königsberg = incorrect_data(Königsberg, 'price', True);\n",
        "plotix(Königsberg, 'date', 'price', 'boxplot');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "7teMSKryvEVg",
        "outputId": "8d4b4e42-ed53-4640-dc73-82beb4b9a127"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "price            -939934592\n",
            "date                   2020\n",
            "geo_lat             54.7131\n",
            "geo_lon           20.466827\n",
            "building_type             3\n",
            "level                     2\n",
            "levels                    4\n",
            "rooms                     2\n",
            "area                   73.3\n",
            "kitchen_area           12.1\n",
            "object_type               2\n",
            "Name: 3464709, dtype: object\n",
            "price            -1129967296\n",
            "date                    2020\n",
            "geo_lat            54.741692\n",
            "geo_lon            20.477229\n",
            "building_type              3\n",
            "level                      2\n",
            "levels                     4\n",
            "rooms                      1\n",
            "area                    36.6\n",
            "kitchen_area            12.1\n",
            "object_type                2\n",
            "Name: 4549187, dtype: object\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-921c4b1e9fc0>:22: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plot.legend(loc='best', shadow=False, scatterpoints=1);\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Теперь, когда некорректные данные удалены, удалим оставшиеся выбросы по принципу зачистки не входящих в квантили 0,25 и 0,75 значений, проверив величину датасета после фильтрации."
      ],
      "metadata": {
        "id": "CKOAEDEzvZwc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Функция фильтрации данных в датасете с помощью квантилей\n",
        "def quantile_filter(table, field):\n",
        "  quantiled_data = table.copy();\n",
        "  low_quantile = table[field].quantile(0.25);\n",
        "  high_quantile = table[field].quantile(0.75);\n",
        "  quantile = high_quantile - low_quantile;\n",
        "  quantiled_data = quantiled_data[(quantiled_data[field] < high_quantile + 1.5 * quantile) & (quantiled_data[field] > low_quantile - 1.5 * quantile)];\n",
        "  return quantiled_data;\n",
        "\n",
        "\n",
        "# Фильтрация с проверкой\n",
        "non_filtred_size = Königsberg.size;\n",
        "Königsberg = quantile_filter(Königsberg, 'price');\n",
        "filtred_size = Königsberg.size;\n",
        "filter_difference = non_filtred_size - filtred_size;\n",
        "print('Количество строк до фильтрации:', non_filtred_size);\n",
        "print('Количество строк после фильтрации:', filtred_size);\n",
        "print('Удалено строк:', filter_difference);\n",
        "print('Удалено строк относительно изначальных данных:', round(filter_difference / non_filtred_size, 2));"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y_Kl3LkIvVKE",
        "outputId": "6f5a25d1-618c-421b-f636-ce55516f3aa1"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Количество строк до фильтрации: 432817\n",
            "Количество строк после фильтрации: 401324\n",
            "Удалено строк: 31493\n",
            "Удалено строк относительно изначальных данных: 0.07\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Количество удалённых строк равно всего 7%, поэтому можно смело анализировать датасет дальше. Выведем график \"Ящик с усами\" после фильтрации данных..."
      ],
      "metadata": {
        "id": "nkOfP-gUyPcc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Вывод графика отфильтрованных данных\n",
        "plotix(Königsberg, 'date', 'price', 'boxplot');"
      ],
      "metadata": {
        "id": "cco933moTqgj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 759
        },
        "outputId": "35fa64ed-9ca0-4971-a877-db20ebd5187b"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-921c4b1e9fc0>:22: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plot.legend(loc='best', shadow=False, scatterpoints=1);\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Таким образом мы избавились от критических выбросов и можем продолжать работу над данными дальше."
      ],
      "metadata": {
        "id": "bSVU9nVByufo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Генерация признаков на основании существующих данных с помощью функций"
      ],
      "metadata": {
        "id": "a1nDIzkDTq67"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Первый очевидный признак, который бросается в глаза, когда смотришь на данные - это расположение квартиры на этаже относительно общего числа этажей.\n",
        "\n",
        "Почему этот признак полезен? Потому что даёт понять, насколько квартира удовлетворит запрос жителя об удобстве. Есть много минусов первых этажей, и чем выше находится квартира в доме - тем лучше.\n",
        "\n",
        "Так, например, если житель первого этажа слышит не только соседние квартиры, топот сверху, но ещё и то, что происходит на улице, под окнами. Зачастую окна располагаются низко, и всякие зеваки могут заглядывать в окно, нарушая личное пространство жителя. Во время прорыва канализации, первые этажи также остро ощущают эту проблему.\n",
        "\n",
        "Дело меняется, если житель живёт выше: на последнем этаже жителя из вышеперечисленного не тревожит даже топот сверху, и единственное указанное может волновать лишь последнее, что ограничится лишь отсутствием воды в квартире.\n",
        "\n",
        "Таким образом, чем выше располагается этаж, тем больше удовлетворённости он принесёт своему жителю."
      ],
      "metadata": {
        "id": "8goVVwYd8jRL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Функция добавления нового столбца на указанную позицию\n",
        "def add_level_part(table, position):\n",
        "  level_parted = table.copy();\n",
        "  level_parted.insert(position, 'level_part', round(level_parted['level'] / level_parted['levels'], 2));\n",
        "  return level_parted;\n",
        "\n",
        "\n",
        "# Применение новеёшней технологии\n",
        "Königsberg = add_level_part(Königsberg, 7);\n",
        "Königsberg"
      ],
      "metadata": {
        "id": "sOgJDSojDM6Y",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "3e838b90-1900-400f-c670-e55a294991bc"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           price  date    geo_lat    geo_lon  building_type  level  levels  \\\n",
              "598570   3000000  2018  54.659968  19.915666              3      2       2   \n",
              "598607   4900000  2018  54.723534  20.470695              3      1       3   \n",
              "598668   3650000  2018  54.723444  20.471314              3      4       5   \n",
              "598698   2600000  2018  54.729801  20.004793              4      5       5   \n",
              "599049   1900000  2018  54.733997  20.467265              4      1       5   \n",
              "...          ...   ...        ...        ...            ...    ...     ...   \n",
              "5475652  2842500  2021  54.707470  20.507324              3      5      10   \n",
              "5475777  3334600  2021  54.707470  20.507324              3      2      10   \n",
              "5476873  5900000  2021  54.711222  20.574834              3      9      12   \n",
              "5476901  2593200  2021  54.707470  20.507324              2      9      10   \n",
              "5476929  3372120  2021  54.707470  20.507324              2      5      10   \n",
              "\n",
              "         level_part  rooms  area  kitchen_area  object_type  \n",
              "598570         1.00      3  84.8          14.5            2  \n",
              "598607         0.33      3  79.6           8.9            2  \n",
              "598668         0.80      2  61.0          15.2            2  \n",
              "598698         1.00      3  62.0          14.0            2  \n",
              "599049         0.20      2  44.0           6.0            2  \n",
              "...             ...    ...   ...           ...          ...  \n",
              "5475652        0.50      1  38.0          12.3            1  \n",
              "5475777        0.20      1  48.0          21.0            1  \n",
              "5476873        0.75      2  56.0          10.0            2  \n",
              "5476901        0.90      1  43.0           8.6            1  \n",
              "5476929        0.50      2  59.0           9.6            1  \n",
              "\n",
              "[36484 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-31559e5b-d834-4904-bdf7-0885b43885b5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>level_part</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>598570</th>\n",
              "      <td>3000000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>84.8</td>\n",
              "      <td>14.5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598607</th>\n",
              "      <td>4900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0.33</td>\n",
              "      <td>3</td>\n",
              "      <td>79.6</td>\n",
              "      <td>8.9</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598668</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.80</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598698</th>\n",
              "      <td>2600000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.729801</td>\n",
              "      <td>20.004793</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>62.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599049</th>\n",
              "      <td>1900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0.20</td>\n",
              "      <td>2</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475652</th>\n",
              "      <td>2842500</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "      <td>12.3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475777</th>\n",
              "      <td>3334600</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1</td>\n",
              "      <td>48.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476873</th>\n",
              "      <td>5900000</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.711222</td>\n",
              "      <td>20.574834</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>0.75</td>\n",
              "      <td>2</td>\n",
              "      <td>56.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476901</th>\n",
              "      <td>2593200</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>0.90</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>8.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476929</th>\n",
              "      <td>3372120</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2</td>\n",
              "      <td>59.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>36484 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31559e5b-d834-4904-bdf7-0885b43885b5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-31559e5b-d834-4904-bdf7-0885b43885b5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-31559e5b-d834-4904-bdf7-0885b43885b5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3f114d6b-8557-482f-8e38-bd01b7ea233c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3f114d6b-8557-482f-8e38-bd01b7ea233c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3f114d6b-8557-482f-8e38-bd01b7ea233c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Königsberg",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Рассмотрим получившиеся примеры и определим правильность коэффициента.\n",
        "\n",
        "Предположим, что, как в записи №598570, этаж 2 из 2 - казалось бы, всего второй, но этот дом, хоть он частный, хоть панельный, но в рамках общего количества этажей удовлетворённость конкретно в этом доме будет максимальной. С первым этажом немного иначе, он удовлетворил бы всего наполовину.\n",
        "\n",
        "И так с каждым зданием..."
      ],
      "metadata": {
        "id": "4DQBRoCs_urB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Построим график зависимости нового признака \"level_part\" от стоимости квартиры \"price\".\n",
        "\n",
        "Чтобы график был информативным, определим промежутки признака \"level_part\". Мысленно разделим дом на три части:\n",
        "1. нижние этажи (0; 0,33];\n",
        "2. средние этажи (0,33; 0,67];\n",
        "3. верхние этажи (0,67; 1].\n",
        "\n",
        "Преобразуем на копии набора данных это поле так, чтобы было комфортно видеть зависимости."
      ],
      "metadata": {
        "id": "CiKmqtKqtKCz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "'''\n",
        "# Разбиение поля набора данных на промежутки и построение графика\n",
        "def plotix_intervals(table, field_x, field_y, plot, interval_count):\n",
        "  intervalued = table.copy();\n",
        "  interval = 1 / interval_count;\n",
        "  rule = {};\n",
        "  for i in range(0, interval_count):\n",
        "    low_x = round(i * interval, 2);\n",
        "    high_x = round((i + 1) * interval, 2);\n",
        "    # sign = '(' + str(low_x) + '; ' + str(high_x) + ']';\n",
        "    rule[-i] = '(' + str(low_x) + '; ' + str(high_x) + ']';\n",
        "    # print(i + 1, ': ( ', low_x, '; ', high_x, ']');\n",
        "    lower_x = low_x - 0.01 if i == 0 else low_x;\n",
        "    for j, row in intervalued.iterrows():\n",
        "      field_value = intervalued.at[j, field_x];\n",
        "      belongs = field_value > lower_x and field_value <= high_x;\n",
        "      intervalued.at[j, field_x] = -i if belongs else field_value;\n",
        "    # intervalued.loc[type(intervalued[field_x]) == float & intervalued[field_x] > lower_x & intervalued[field_x] <= high_x, field_x] = sign;\n",
        "    # intervalued[field_x] = intervalued[field_x].mask(intervalued[field_x] > lower_x & intervalued[field_x] <= high_x, sign);\n",
        "    # intervalued[field_x] = numpy.where(\n",
        "    #     intervalued[field_x] > lower_x and intervalued[field_x] <= high_x,\n",
        "    #     sign,\n",
        "    #     intervalued[field_x]\n",
        "    # );\n",
        "    # intervalued = intervalued.replace((intervalued[field_x] > lower_x) & (intervalued[field_x] <= high_x), sign);\n",
        "  intervalued[field_x] = intervalued[field_x].replace(rule);\n",
        "  # print(intervalued);\n",
        "  plotix(intervalued, field_x, field_y, plot);\n",
        "\n",
        "\n",
        "# Построение графика с промежутками по получившемуся полю\n",
        "plotix_intervals(Königsberg, 'level_part', 'price', 'bar', 3);\n",
        "'''"
      ],
      "metadata": {
        "id": "sy0MVaDeuEot",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 140
        },
        "outputId": "43996683-5bf6-4b7d-8627-b541c8901daa"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "\"\\n# Разбиение поля набора данных на промежутки и построение графика\\ndef plotix_intervals(table, field_x, field_y, plot, interval_count):\\n  intervalued = table.copy();\\n  interval = 1 / interval_count;\\n  rule = {};\\n  for i in range(0, interval_count):\\n    low_x = round(i * interval, 2);\\n    high_x = round((i + 1) * interval, 2);\\n    # sign = '(' + str(low_x) + '; ' + str(high_x) + ']';\\n    rule[-i] = '(' + str(low_x) + '; ' + str(high_x) + ']';\\n    # print(i + 1, ': ( ', low_x, '; ', high_x, ']');\\n    lower_x = low_x - 0.01 if i == 0 else low_x;\\n    for j, row in intervalued.iterrows():\\n      field_value = intervalued.at[j, field_x];\\n      belongs = field_value > lower_x and field_value <= high_x;\\n      intervalued.at[j, field_x] = -i if belongs else field_value;\\n    # intervalued.loc[type(intervalued[field_x]) == float & intervalued[field_x] > lower_x & intervalued[field_x] <= high_x, field_x] = sign;\\n    # intervalued[field_x] = intervalued[field_x].mask(intervalued[field_x] > lower_x & intervalued[field_x] <= high_x, sign);\\n    # intervalued[field_x] = numpy.where(\\n    #     intervalued[field_x] > lower_x and intervalued[field_x] <= high_x,\\n    #     sign,\\n    #     intervalued[field_x]\\n    # );\\n    # intervalued = intervalued.replace((intervalued[field_x] > lower_x) & (intervalued[field_x] <= high_x), sign);\\n  intervalued[field_x] = intervalued[field_x].replace(rule);\\n  # print(intervalued);\\n  plotix(intervalued, field_x, field_y, plot);\\n\\n\\n# Построение графика с промежутками по получившемуся полю\\nplotix_intervals(Königsberg, 'level_part', 'price', 'bar', 3);\\n\""
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Построение графика зависимости поля \"level_part\" от поля \"price\"\n",
        "plotix(Königsberg, 'level_part', 'price', 'line');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 773
        },
        "id": "riwJGfspqIuQ",
        "outputId": "0cc47cf1-cbd2-4122-9b06-43de121ccd29"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-921c4b1e9fc0>:22: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plot.legend(loc='best', shadow=False, scatterpoints=1);\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "По графику можно заметить, что действительно, не считая выброса возле значения этажности 0,2, то стоимость квартир растёт ближе к последнему...\n",
        "\n",
        "Помните про некорректный object_type? Для следующего признака он пригодится! Попробуем определить минимальную и максимальную стоимость квартир относительно новизны квартиры..."
      ],
      "metadata": {
        "id": "GrxbEF7GBQ0b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Получить описание списка по правилу\n",
        "def print_metadata(value_list, keyword, returnable):\n",
        "  max_value = max(value_list);\n",
        "  min_value = min(value_list);\n",
        "  mean_value = round(sum(value_list) / len(value_list), 2);\n",
        "  print('    <!-- Определение', keyword, '-->    ');\n",
        "  print('Уникальные значения:', value_list);\n",
        "  print('Максимальное ' + keyword + ':', max_value);\n",
        "  print('Минимальное ' + keyword + ':', min_value);\n",
        "  print('Среднее ' + keyword + ':', mean_value, '\\n');\n",
        "  match returnable:\n",
        "    case 'max': return max_value;\n",
        "    case 'min': return min_value;\n",
        "    case 'mean': return mean_value;\n",
        "    case _: return mean_value;\n",
        "\n",
        "\n",
        "# Определение уникальных значений для поля \"price\"\n",
        "def print_field_metadata(table, field, expect_unique, field_unique, keyword, returnable):\n",
        "  return_elements = {};\n",
        "  if expect_unique:\n",
        "    for i in table[field_unique].unique():\n",
        "      unique_values = table.loc[table[field_unique] == i][field].unique();\n",
        "      return_elements[i] = print_metadata(unique_values, keyword[i], returnable);\n",
        "  else:\n",
        "    unique_values = table[field].unique();\n",
        "    return_elements[0] = print_metadata(unique_values, keyword, returnable);\n",
        "  return return_elements;\n",
        "\n",
        "\n",
        "# Определение подстановки при выводе на экран\n",
        "keyword = {\n",
        "    0: 'стоимости квартиры',\n",
        "    1: 'стоимости вторичного жилья',\n",
        "    2: 'стоимости новостройки'\n",
        "};\n",
        "\n",
        "\n",
        "# Вывод полей на экран\n",
        "print_field_metadata(Königsberg, 'price', False, None, keyword[0], None);\n",
        "print_field_metadata(Königsberg, 'price', True, 'object_type', keyword, None);\n",
        "\n",
        "\n",
        "#unique_prices_object_type = Königsberg.loc[Königsberg['object_type'] == 1]['price'].unique();\n",
        "#print('Уникальные значения старой квартиры:', unique_prices_object_type);\n",
        "#print('Максимальная стоимость старой квартиры:', max(unique_prices_object_type));\n",
        "#print('Минимальная стоимость старой квартиры:', min(unique_prices_object_type));\n",
        "\n",
        "#unique_prices_object_type = Königsberg.loc[Königsberg['object_type'] == 2]['price'].unique();\n",
        "#print('Уникальные значения новой квартиры:', unique_prices_object_type);\n",
        "#print('Максимальная стоимость новой квартиры:', max(unique_prices_object_type));\n",
        "#print('Минимальная стоимость новой квартиры:', min(unique_prices_object_type));"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NLNWWkPbCNsT",
        "outputId": "30fd8f12-3ae9-492c-d34c-a9c70063addc"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    <!-- Определение стоимости квартиры -->    \n",
            "Уникальные значения: [3000000 4900000 3650000 ... 4932000 3698000 3334600]\n",
            "Максимальное стоимости квартиры: 9650000\n",
            "Минимальное стоимости квартиры: 800\n",
            "Среднее стоимости квартиры: 4022701.18 \n",
            "\n",
            "    <!-- Определение стоимости новостройки -->    \n",
            "Уникальные значения: [3000000 4900000 3650000 ... 5166000 7137200 6599999]\n",
            "Максимальное стоимости новостройки: 9650000\n",
            "Минимальное стоимости новостройки: 800\n",
            "Среднее стоимости новостройки: 4645799.51 \n",
            "\n",
            "    <!-- Определение стоимости вторичного жилья -->    \n",
            "Уникальные значения: [1999999 2520760 2393380 ... 4932000 3698000 3334600]\n",
            "Максимальное стоимости вторичного жилья: 9626400\n",
            "Минимальное стоимости вторичного жилья: 1850\n",
            "Среднее стоимости вторичного жилья: 3894542.46 \n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Стал очевидным факт, что в наборе данных присутствуют сбивающие с толку значения: минимальная стоимость квартиры с экстримально низкими показателями: например, 800 рублей для новостройки и 1850 рублей для вторичного жилья.\n",
        "\n",
        "Сначала посмотрим, насколько много таких данных."
      ],
      "metadata": {
        "id": "ouWYHn08k-FJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Определение ломающих данные стоимости\n",
        "broken_prices = Königsberg.loc[Königsberg['price'] < 200000]['price'].unique();\n",
        "broken_prices"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BGSSAC4ok9yp",
        "outputId": "aaf1ee91-f0d3-405a-b312-ce6109619d83"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1850,  800, 4800])"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Кажется, трёмя строками набора данных можно пренебречь. Удалим их раз и навсегда...\n",
        "\n",
        "(Вообще, есть предположение, что здесь каким-то образом затаилась посуточная аренда квартир, она нам не подходит...)"
      ],
      "metadata": {
        "id": "5I3PlSPhmTaE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Удаление сломанных квартир\n",
        "# tmp = Königsberg.loc[Königsberg['price'].isin(broken_prices)];\n",
        "Königsberg = Königsberg.drop(Königsberg[Königsberg['price'].isin(broken_prices)].index);\n",
        "Königsberg"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "U6B0io5GkOcb",
        "outputId": "dcc14338-7526-4f53-f153-0b59a5518646"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           price  date    geo_lat    geo_lon  building_type  level  levels  \\\n",
              "598570   3000000  2018  54.659968  19.915666              3      2       2   \n",
              "598607   4900000  2018  54.723534  20.470695              3      1       3   \n",
              "598668   3650000  2018  54.723444  20.471314              3      4       5   \n",
              "598698   2600000  2018  54.729801  20.004793              4      5       5   \n",
              "599049   1900000  2018  54.733997  20.467265              4      1       5   \n",
              "...          ...   ...        ...        ...            ...    ...     ...   \n",
              "5475652  2842500  2021  54.707470  20.507324              3      5      10   \n",
              "5475777  3334600  2021  54.707470  20.507324              3      2      10   \n",
              "5476873  5900000  2021  54.711222  20.574834              3      9      12   \n",
              "5476901  2593200  2021  54.707470  20.507324              2      9      10   \n",
              "5476929  3372120  2021  54.707470  20.507324              2      5      10   \n",
              "\n",
              "         level_part  rooms  area  kitchen_area  object_type  \n",
              "598570         1.00      3  84.8          14.5            2  \n",
              "598607         0.33      3  79.6           8.9            2  \n",
              "598668         0.80      2  61.0          15.2            2  \n",
              "598698         1.00      3  62.0          14.0            2  \n",
              "599049         0.20      2  44.0           6.0            2  \n",
              "...             ...    ...   ...           ...          ...  \n",
              "5475652        0.50      1  38.0          12.3            1  \n",
              "5475777        0.20      1  48.0          21.0            1  \n",
              "5476873        0.75      2  56.0          10.0            2  \n",
              "5476901        0.90      1  43.0           8.6            1  \n",
              "5476929        0.50      2  59.0           9.6            1  \n",
              "\n",
              "[36481 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9727d8e2-a213-4148-a5ae-f4d73f7ff63f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>level_part</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>598570</th>\n",
              "      <td>3000000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>84.8</td>\n",
              "      <td>14.5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598607</th>\n",
              "      <td>4900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0.33</td>\n",
              "      <td>3</td>\n",
              "      <td>79.6</td>\n",
              "      <td>8.9</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598668</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.80</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598698</th>\n",
              "      <td>2600000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.729801</td>\n",
              "      <td>20.004793</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>62.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599049</th>\n",
              "      <td>1900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0.20</td>\n",
              "      <td>2</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475652</th>\n",
              "      <td>2842500</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "      <td>12.3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475777</th>\n",
              "      <td>3334600</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1</td>\n",
              "      <td>48.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476873</th>\n",
              "      <td>5900000</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.711222</td>\n",
              "      <td>20.574834</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>0.75</td>\n",
              "      <td>2</td>\n",
              "      <td>56.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476901</th>\n",
              "      <td>2593200</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>0.90</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>8.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476929</th>\n",
              "      <td>3372120</td>\n",
              "      <td>2021</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2</td>\n",
              "      <td>59.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>36481 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9727d8e2-a213-4148-a5ae-f4d73f7ff63f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9727d8e2-a213-4148-a5ae-f4d73f7ff63f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9727d8e2-a213-4148-a5ae-f4d73f7ff63f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f5a12a70-0187-4021-b42e-dcd79a1150c3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f5a12a70-0187-4021-b42e-dcd79a1150c3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f5a12a70-0187-4021-b42e-dcd79a1150c3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Königsberg",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Как можно убедиться, было удалено всего 3 строки. А значит, информацию по данным можно запросить ещё раз и проверить их значения сейчас."
      ],
      "metadata": {
        "id": "qrVteZ5vsV1X"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Получение средних\n",
        "mean_prices = print_field_metadata(Königsberg, 'price', True, 'object_type', keyword, 'mean');\n",
        "print('    <!-- Средние значения стоимости квартир -->    \\nСредние значения стоимости квартир:', mean_prices);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YtMvR4nFsVa5",
        "outputId": "51801a78-0e0b-41f6-ede2-b634f82432a9"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    <!-- Определение стоимости новостройки -->    \n",
            "Уникальные значения: [3000000 4900000 3650000 ... 5166000 7137200 6599999]\n",
            "Максимальное стоимости новостройки: 9650000\n",
            "Минимальное стоимости новостройки: 250000\n",
            "Среднее стоимости новостройки: 4653576.73 \n",
            "\n",
            "    <!-- Определение стоимости вторичного жилья -->    \n",
            "Уникальные значения: [1999999 2520760 2393380 ... 4932000 3698000 3334600]\n",
            "Максимальное стоимости вторичного жилья: 9626400\n",
            "Минимальное стоимости вторичного жилья: 500000\n",
            "Среднее стоимости вторичного жилья: 3895319.6 \n",
            "\n",
            "    <!-- Средние значения стоимости квартир -->    \n",
            "Средние значения стоимости квартир: {np.int64(2): np.float64(4653576.73), np.int64(1): np.float64(3895319.6)}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "На основании этих данных теперь будем оценивать отклонение от среднего значения стоимости квартиры для каждого из типов жилого объекта, определив новое поле \"mean_difference\"."
      ],
      "metadata": {
        "id": "2MEk9a03vbE8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Добавление отклонения от среднего значения стоимости квартир\n",
        "# Функция добавления нового столбца на указанную позицию\n",
        "def add_mean_difference(table, position):\n",
        "  field = 'mean_difference';\n",
        "  mean_differentiated = table.copy();\n",
        "  mean_differentiated.insert(\n",
        "      position,\n",
        "      field,\n",
        "      Königsberg['object_type']\n",
        "      # Königsberg['price'] - round(mean_prices[Königsberg['object_type']])\n",
        "  );\n",
        "  for i, row in mean_differentiated.iterrows():\n",
        "    price = mean_differentiated.at[i, 'price'];\n",
        "    object_type = mean_differentiated.at[i, field];\n",
        "    mean_differentiated.at[i, field] = price - round(mean_prices[object_type]);\n",
        "  return mean_differentiated;\n",
        "\n",
        "\n",
        "# Применение новеёшней технологии\n",
        "Königsberg = add_mean_difference(Königsberg, 2);\n",
        "Königsberg"
      ],
      "metadata": {
        "id": "fwKbQlDewWF3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "outputId": "e4925ade-7c5c-47aa-c0c0-704f92745088"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           price  date  mean_difference    geo_lat    geo_lon  building_type  \\\n",
              "598570   3000000  2018         -1653577  54.659968  19.915666              3   \n",
              "598607   4900000  2018           246423  54.723534  20.470695              3   \n",
              "598668   3650000  2018         -1003577  54.723444  20.471314              3   \n",
              "598698   2600000  2018         -2053577  54.729801  20.004793              4   \n",
              "599049   1900000  2018         -2753577  54.733997  20.467265              4   \n",
              "...          ...   ...              ...        ...        ...            ...   \n",
              "5475652  2842500  2021         -1052820  54.707470  20.507324              3   \n",
              "5475777  3334600  2021          -560720  54.707470  20.507324              3   \n",
              "5476873  5900000  2021          1246423  54.711222  20.574834              3   \n",
              "5476901  2593200  2021         -1302120  54.707470  20.507324              2   \n",
              "5476929  3372120  2021          -523200  54.707470  20.507324              2   \n",
              "\n",
              "         level  levels  level_part  rooms  area  kitchen_area  object_type  \n",
              "598570       2       2        1.00      3  84.8          14.5            2  \n",
              "598607       1       3        0.33      3  79.6           8.9            2  \n",
              "598668       4       5        0.80      2  61.0          15.2            2  \n",
              "598698       5       5        1.00      3  62.0          14.0            2  \n",
              "599049       1       5        0.20      2  44.0           6.0            2  \n",
              "...        ...     ...         ...    ...   ...           ...          ...  \n",
              "5475652      5      10        0.50      1  38.0          12.3            1  \n",
              "5475777      2      10        0.20      1  48.0          21.0            1  \n",
              "5476873      9      12        0.75      2  56.0          10.0            2  \n",
              "5476901      9      10        0.90      1  43.0           8.6            1  \n",
              "5476929      5      10        0.50      2  59.0           9.6            1  \n",
              "\n",
              "[36481 rows x 13 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-981da862-2214-4d95-bdbd-8584ca3724af\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>mean_difference</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>level_part</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>598570</th>\n",
              "      <td>3000000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-1653577</td>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>84.8</td>\n",
              "      <td>14.5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598607</th>\n",
              "      <td>4900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>246423</td>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0.33</td>\n",
              "      <td>3</td>\n",
              "      <td>79.6</td>\n",
              "      <td>8.9</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598668</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-1003577</td>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.80</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598698</th>\n",
              "      <td>2600000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-2053577</td>\n",
              "      <td>54.729801</td>\n",
              "      <td>20.004793</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>62.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599049</th>\n",
              "      <td>1900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-2753577</td>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0.20</td>\n",
              "      <td>2</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475652</th>\n",
              "      <td>2842500</td>\n",
              "      <td>2021</td>\n",
              "      <td>-1052820</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "      <td>12.3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475777</th>\n",
              "      <td>3334600</td>\n",
              "      <td>2021</td>\n",
              "      <td>-560720</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1</td>\n",
              "      <td>48.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476873</th>\n",
              "      <td>5900000</td>\n",
              "      <td>2021</td>\n",
              "      <td>1246423</td>\n",
              "      <td>54.711222</td>\n",
              "      <td>20.574834</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>0.75</td>\n",
              "      <td>2</td>\n",
              "      <td>56.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476901</th>\n",
              "      <td>2593200</td>\n",
              "      <td>2021</td>\n",
              "      <td>-1302120</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>0.90</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>8.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476929</th>\n",
              "      <td>3372120</td>\n",
              "      <td>2021</td>\n",
              "      <td>-523200</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2</td>\n",
              "      <td>59.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>36481 rows × 13 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-981da862-2214-4d95-bdbd-8584ca3724af')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-981da862-2214-4d95-bdbd-8584ca3724af button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-981da862-2214-4d95-bdbd-8584ca3724af');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7440717c-9ac3-45f8-9f5d-1affe7ef4f0e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7440717c-9ac3-45f8-9f5d-1affe7ef4f0e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7440717c-9ac3-45f8-9f5d-1affe7ef4f0e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Königsberg",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Построим график получившихся новых данных \"mean_difference\" в зависимости от стоимости квартиры \"price\"."
      ],
      "metadata": {
        "id": "T4wyYsn7AJ6y"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Построение графика зависимости разницы от среднего значения \"mean_difference\" от стоимости квартиры \"price\"\n",
        "plotix(Königsberg, 'mean_difference', 'price', 'bar');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 773
        },
        "id": "oApCpr9pATzg",
        "outputId": "31bb845c-17a8-426f-919c-0212b5f5f139"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-921c4b1e9fc0>:22: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plot.legend(loc='best', shadow=False, scatterpoints=1);\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Да, определённо именно такой график и должен был получиться, стоило предполагать..."
      ],
      "metadata": {
        "id": "3r7dST2nBKyK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Загрузка дополнительных данных, обогащающих исходные данные\n",
        "\n",
        "Попробуем с помощью API-запросов на популярные платформы найти информацию об объекте.\n",
        "\n",
        "Для начала определим, сколько разных пар координат существуют, чтобы не преодолеть дневной лимит, который существует у большинства геокодеров."
      ],
      "metadata": {
        "id": "21AGIP9FUaVQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Определим количество уникальных координат, поскольку, как выяснится позже, уникальных координат слишком много, а количество допустимых бесплатных запросов - нереально мало."
      ],
      "metadata": {
        "id": "2tBFfIQSIVro"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tmp = [];\n",
        "for i, row in Königsberg.iterrows():\n",
        "  geo_lat = str(Königsberg.at[i, 'geo_lat']);\n",
        "  geo_lon = str(Königsberg.at[i, 'geo_lon']);\n",
        "  geo_code = geo_lat + ',' + geo_lon;\n",
        "  if geo_code not in tmp:\n",
        "    tmp.append(geo_code);\n",
        "\n",
        "print(len(tmp));\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zTvcIDR8ubB-",
        "outputId": "b1f714b1-e367-4e41-8578-ab615aa8315c"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1260\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Как видим, уникальных координат действительно мало, так что, создадим список уникальных координат и сохраним его в таблицу."
      ],
      "metadata": {
        "id": "ahQZMh7HIs2k"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "В первую очередь задействуем [Geocoder API](https://id.2gis.com/authorize?redirect_uri=https%3A%2F%2Fplatform.2gis.ru%2Fapi%2Fauth%2Fcode&client_id=E6A3wC4has1khQGA7LVNB2Ayox3ohQRr&response_type=code&state=eyJyZXR1cm5fdXJpIjoiaHR0cHM6Ly9wbGF0Zm9ybS4yZ2lzLnJ1L3J1L2tleXMiLCJjc3JmVG9rZW4iOiJlNWEyNTFiNS01MDNlLTRiMTEtODMxYi0wNTZhMzYzNjNiOTEifQ%253D%253D&scope=name+email+phone+avatar&code_challenge=NEhSy06PSKLR-a9vmAmMa5IxN6_jBWRDgTo7RxsnWqM&nonce=d27b03b7-5af2-4c94-b2ec-514becb0dad3&country=ru_pro&locale=ru&code_challenge_method=S256&stage=social&template=%2Fmailer%2F5922e75d69718a3b984bdbf7ba00edcb) от команды 2GIS.\n",
        "Предварительно сгенерируем ключи, которые понадобятся для получения информации по координатам.\n",
        "\n",
        "Однако, API-ключи имеют свойство заканчиваться спустя 1000 запросов, поэтому был создан датасет дополняющих данных по уникальным координатам, исходный код которого доступен по ссылке на GitHub: [1.2. Конструирование API геокодинга](https://github.com/namespaceStedd/machinelearning/blob/main/1.2.%20Конструирование%20API%20геокодинга).\n",
        "\n",
        "Импортируем датасет, полученный в результате работы кода."
      ],
      "metadata": {
        "id": "7byAFfZ2Dp8c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Опционально выбираем, как хотим импортировать:\n",
        "# Ссылка: не сформирована, файл большой и открыться не может\n",
        "# Файл, начиная с репозитория блокнотов: Bean Machine/lab.1/russia_real_estate.csv\n",
        "geocoding = optional_import('Bean Machine/lab.1/geocoding.csv');\n",
        "geocoding.head()\n"
      ],
      "metadata": {
        "id": "rZZoSxkXUZbg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "outputId": "a5c98b6d-4ebb-4645-ff6d-086a61200d1a"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/gdrive/; to attempt to forcibly remount, call drive.mount(\"/content/gdrive/\", force_remount=True).\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    latitude  longitude settlement_type         town  postcode\n",
              "0  54.659968  19.915666            town     Baltiysk  238527.0\n",
              "1  54.723534  20.470695            city  Kaliningrad  236022.0\n",
              "2  54.723444  20.471314            city  Kaliningrad  236022.0\n",
              "3  54.729801  20.004793            town     Primorsk       NaN\n",
              "4  54.733997  20.467265            city  Kaliningrad  236023.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3f0b8ff0-abd0-4c60-9715-d8a1ae8493ef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>latitude</th>\n",
              "      <th>longitude</th>\n",
              "      <th>settlement_type</th>\n",
              "      <th>town</th>\n",
              "      <th>postcode</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>town</td>\n",
              "      <td>Baltiysk</td>\n",
              "      <td>238527.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236022.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236022.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>54.729801</td>\n",
              "      <td>20.004793</td>\n",
              "      <td>town</td>\n",
              "      <td>Primorsk</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236023.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3f0b8ff0-abd0-4c60-9715-d8a1ae8493ef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3f0b8ff0-abd0-4c60-9715-d8a1ae8493ef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3f0b8ff0-abd0-4c60-9715-d8a1ae8493ef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a387fcd-f76b-40ed-9d15-f80f2574a4aa\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a387fcd-f76b-40ed-9d15-f80f2574a4aa')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a387fcd-f76b-40ed-9d15-f80f2574a4aa button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "geocoding",
              "summary": "{\n  \"name\": \"geocoding\",\n  \"rows\": 1260,\n  \"fields\": [\n    {\n      \"column\": \"latitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09703785442132834,\n        \"min\": 54.3530276,\n        \"max\": 55.1553094,\n        \"num_unique_values\": 1259,\n        \"samples\": [\n          55.0809336,\n          54.7253476,\n          54.7112215\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"longitude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3763075980879053,\n        \"min\": 19.890196,\n        \"max\": 22.5713736,\n        \"num_unique_values\": 1260,\n        \"samples\": [\n          21.8886106,\n          20.4444927,\n          20.574834\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"settlement_type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"city\",\n          \"county\",\n          \"town\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"town\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 55,\n        \"samples\": [\n          \"Golubevo\",\n          \"Rodniki\",\n          \"\\u0410\\u0432\\u0430\\u043d\\u0433\\u0430\\u0440\\u0434\\u043d\\u043e\\u0435\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"postcode\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4378.0421997911535,\n        \"min\": 226005.0,\n        \"max\": 290505.0,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          236004.0,\n          238581.0,\n          238300.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Объединение данных\n",
        "Объединим полученные датасеты в один большой. Для этого, переберём значения исходного датасета и сопоставим координаты"
      ],
      "metadata": {
        "id": "PlLuUFiBUnOm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Проба пера\n",
        "# geocoding.loc[(geocoding['latitude'] == 54.659968) & (geocoding['longitude'] == 19.915666)]\n",
        "filtred_row = geocoding.loc[(geocoding['latitude'] == Königsberg.loc[598570, 'geo_lat']) & (geocoding['longitude'] == Königsberg.loc[598570, 'geo_lon'])];\n",
        "town = filtred_row['town'];\n",
        "town.item()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "Q2Eb-fkKlzCh",
        "outputId": "7454cd79-b622-4245-e4ad-6d30f818c8da"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Baltiysk'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 74
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lat_val = geocoding.loc[0, 'latitude'];\n",
        "print(lat_val);\n",
        "print(lat_val == 54.659968);\n",
        "\n",
        "lon_val = geocoding.loc[0, 'longitude'];\n",
        "print(lon_val);\n",
        "print(lon_val == 19.915666);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_wfSuPbTjK6h",
        "outputId": "2839dae3-687c-4b0b-f87e-0a19efdcd660"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "54.659968\n",
            "True\n",
            "19.9156659\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Импортозамещение API-геокодерских данных\n",
        "def import_geocode_data(target_table, auxiliary_table):\n",
        "  # column_list = ['latitude', 'longitude', 'settlement_type', 'town', 'postcode'];\n",
        "  table_with_geocoding = target_table.copy();\n",
        "  # table_with_geocoding['settlement_type'] = pandas.Series();\n",
        "  # table_with_geocoding['town'] = pandas.Series();\n",
        "  # table_with_geocoding['postcode'] = pandas.Series();\n",
        "  settlement_type_index = 5;\n",
        "  town_index = 5;\n",
        "  postcode_index = 5;\n",
        "  table_with_geocoding.insert(settlement_type_index, 'settlement_type', None);\n",
        "  table_with_geocoding.insert(town_index + 1, 'town', None);\n",
        "  table_with_geocoding.insert(postcode_index + 2, 'postcode', None);\n",
        "  for i, row in table_with_geocoding.iterrows():\n",
        "    latitude = table_with_geocoding.at[i, 'geo_lat'];\n",
        "    longitude = table_with_geocoding.at[i, 'geo_lon'];\n",
        "    auxiliary_row = auxiliary_table.loc[\n",
        "        (auxiliary_table['latitude'] == table_with_geocoding.loc[i, 'geo_lat']) &\n",
        "         (auxiliary_table['longitude'] == table_with_geocoding.loc[i, 'geo_lon'])\n",
        "    ];\n",
        "    settlement_type = auxiliary_row['settlement_type'].item();\n",
        "    town = auxiliary_row['town'].item();\n",
        "    postcode = auxiliary_row['postcode'].item();\n",
        "    postcode = int(postcode) if not numpy.isnan(postcode) else postcode;\n",
        "    table_with_geocoding.at[i, 'settlement_type'] = settlement_type;\n",
        "    table_with_geocoding.at[i, 'town'] = town;\n",
        "    table_with_geocoding.at[i, 'postcode'] = postcode;\n",
        "    # table_with_geocoding.insert(i, 'settlement_type', settlement_type);\n",
        "    # table_with_geocoding.insert(i, 'town', town);\n",
        "    # table_with_geocoding.insert(i, 'postcode', postcode);\n",
        "  return table_with_geocoding;\n",
        "\n",
        "\n",
        "# Получение соверешенно летнего датасета\n",
        "Königsberg = import_geocode_data(Königsberg, geocoding);\n",
        "Königsberg\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "6pXzgllyqceq",
        "outputId": "f1e1fbf5-a336-4f16-b680-d1c29fe9ba43"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           price  date  mean_difference    geo_lat    geo_lon settlement_type  \\\n",
              "598570   3000000  2018         -1653577  54.659968  19.915666            town   \n",
              "598607   4900000  2018           246423  54.723534  20.470695            city   \n",
              "598668   3650000  2018         -1003577  54.723444  20.471314            city   \n",
              "598698   2600000  2018         -2053577  54.729801  20.004793            town   \n",
              "599049   1900000  2018         -2753577  54.733997  20.467265            city   \n",
              "...          ...   ...              ...        ...        ...             ...   \n",
              "5475652  2842500  2021         -1052820  54.707470  20.507324            city   \n",
              "5475777  3334600  2021          -560720  54.707470  20.507324            city   \n",
              "5476873  5900000  2021          1246423  54.711222  20.574834            city   \n",
              "5476901  2593200  2021         -1302120  54.707470  20.507324            city   \n",
              "5476929  3372120  2021          -523200  54.707470  20.507324            city   \n",
              "\n",
              "                town postcode  building_type  level  levels  level_part  \\\n",
              "598570      Baltiysk   238527              3      2       2        1.00   \n",
              "598607   Kaliningrad   236022              3      1       3        0.33   \n",
              "598668   Kaliningrad   236022              3      4       5        0.80   \n",
              "598698      Primorsk      NaN              4      5       5        1.00   \n",
              "599049   Kaliningrad   236023              4      1       5        0.20   \n",
              "...              ...      ...            ...    ...     ...         ...   \n",
              "5475652  Kaliningrad   236060              3      5      10        0.50   \n",
              "5475777  Kaliningrad   236060              3      2      10        0.20   \n",
              "5476873  Kaliningrad   236015              3      9      12        0.75   \n",
              "5476901  Kaliningrad   236060              2      9      10        0.90   \n",
              "5476929  Kaliningrad   236060              2      5      10        0.50   \n",
              "\n",
              "         rooms  area  kitchen_area  object_type  \n",
              "598570       3  84.8          14.5            2  \n",
              "598607       3  79.6           8.9            2  \n",
              "598668       2  61.0          15.2            2  \n",
              "598698       3  62.0          14.0            2  \n",
              "599049       2  44.0           6.0            2  \n",
              "...        ...   ...           ...          ...  \n",
              "5475652      1  38.0          12.3            1  \n",
              "5475777      1  48.0          21.0            1  \n",
              "5476873      2  56.0          10.0            2  \n",
              "5476901      1  43.0           8.6            1  \n",
              "5476929      2  59.0           9.6            1  \n",
              "\n",
              "[36481 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e336cfa8-a411-4605-a57a-a45d21d9921b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>mean_difference</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>settlement_type</th>\n",
              "      <th>town</th>\n",
              "      <th>postcode</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>level_part</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>598570</th>\n",
              "      <td>3000000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-1653577</td>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>town</td>\n",
              "      <td>Baltiysk</td>\n",
              "      <td>238527</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>84.8</td>\n",
              "      <td>14.5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598607</th>\n",
              "      <td>4900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>246423</td>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236022</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0.33</td>\n",
              "      <td>3</td>\n",
              "      <td>79.6</td>\n",
              "      <td>8.9</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598668</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-1003577</td>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236022</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.80</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598698</th>\n",
              "      <td>2600000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-2053577</td>\n",
              "      <td>54.729801</td>\n",
              "      <td>20.004793</td>\n",
              "      <td>town</td>\n",
              "      <td>Primorsk</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>62.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599049</th>\n",
              "      <td>1900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-2753577</td>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236023</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0.20</td>\n",
              "      <td>2</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475652</th>\n",
              "      <td>2842500</td>\n",
              "      <td>2021</td>\n",
              "      <td>-1052820</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236060</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "      <td>12.3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475777</th>\n",
              "      <td>3334600</td>\n",
              "      <td>2021</td>\n",
              "      <td>-560720</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236060</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1</td>\n",
              "      <td>48.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476873</th>\n",
              "      <td>5900000</td>\n",
              "      <td>2021</td>\n",
              "      <td>1246423</td>\n",
              "      <td>54.711222</td>\n",
              "      <td>20.574834</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236015</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>0.75</td>\n",
              "      <td>2</td>\n",
              "      <td>56.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476901</th>\n",
              "      <td>2593200</td>\n",
              "      <td>2021</td>\n",
              "      <td>-1302120</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236060</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>0.90</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>8.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476929</th>\n",
              "      <td>3372120</td>\n",
              "      <td>2021</td>\n",
              "      <td>-523200</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236060</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2</td>\n",
              "      <td>59.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>36481 rows × 16 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e336cfa8-a411-4605-a57a-a45d21d9921b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e336cfa8-a411-4605-a57a-a45d21d9921b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e336cfa8-a411-4605-a57a-a45d21d9921b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e5e01879-ed97-4c44-9395-ef67f600a352\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e5e01879-ed97-4c44-9395-ef67f600a352')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e5e01879-ed97-4c44-9395-ef67f600a352 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Königsberg",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Проверим корректность импортозамещения данных..."
      ],
      "metadata": {
        "id": "1Jd5vVI61rHb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Проверим уникальные значения на корректность извлечения\n",
        "imported_columns = ['settlement_type', 'town', 'postcode'];\n",
        "for column in imported_columns:\n",
        "  print(column, '\\n', Königsberg[column].unique(), '\\n\\n');\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PvUkfjBVzqI5",
        "outputId": "83ff680a-5890-4359-f954-d61903dcf9d8"
      },
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "settlement_type \n",
            " ['town' 'city' 'village' 'county'] \n",
            "\n",
            "\n",
            "town \n",
            " ['Baltiysk' 'Kaliningrad' 'Primorsk' 'Sovetsk' 'Светлый' 'Rodniki'\n",
            " 'Васильково' 'Svetlogorsk' 'Pionersky' 'Gusev' 'Gvardeysk' 'Guryevsk'\n",
            " 'Zelenogradsk' 'Donskoye' 'Polessk' 'Slavsk' 'Chernyakhovsk' 'Неман'\n",
            " 'Gavrilovo' 'Yantarny' 'Znamensk' 'Pravdinsk' 'Mamonovo' 'Ladushkin'\n",
            " 'Rybachy' 'Zheleznodorozhny' 'Ozyorsk' 'Konstantinovka' 'Bagrationovsk'\n",
            " 'Nesterov' 'Lugovoye' 'Golubevo' 'Авангардное' 'Bolshoye Isakovo'\n",
            " 'Maloye Isakovo' 'Пионерский городской округ'\n",
            " 'Светловский городской округ' 'Nevskoye' 'Ульяново' 'Maloje Wassilkowo'\n",
            " 'Lazovskoye' 'Dobrino' 'Дорожный' 'Волочаевское' 'Горбатовка' 'Malinniki'\n",
            " 'Bagrationovsky District' 'Lesnoy' 'Laskino' 'Zelenogradsky District'\n",
            " 'Gvardeysky District' 'Ushakovo' 'Dolgorukovo' 'Люблино' 'Романово'] \n",
            "\n",
            "\n",
            "postcode \n",
            " [238527 236022 nan 236023 236038 236010 238758 238340 236016 236060 236011\n",
            " 238313 236009 238310 238560 238520 236000 236019 238590 236005 238700\n",
            " 236041 238051 236015 238210 236029 236012 236008 236034 263023 236001\n",
            " 238300 236013 236040 238530 236044 238563 238630 236043 238752 238600\n",
            " 239001 238755 236039 236017 236004 236048 263010 238150 238030 238711\n",
            " 238151 236003 238125 238581 238710 238100 238200 238154 236006 236021\n",
            " 238756 236901 236049 238400 238450 238460 236028 238535 238120 290505\n",
            " 238420 236020 236007 238010 238325 238610 238056 238311 226005 236036\n",
            " 238750 238324 238345 238534 238553 238347 238561 236035 238552] \n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Как видно, много разных уникальных значений, что может говорить лишь о том, что мы всё сделали как надо)"
      ],
      "metadata": {
        "id": "Aka1dddx1wKv"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Выбор признаков\n",
        "\n",
        "Выбор значимых признаков описан в пункте \"Фильтрация нужных данных\""
      ],
      "metadata": {
        "id": "DADaLN1VDPgk"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9xPdNO-bDOvn"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Удаление / замена пропусков\n",
        "\n",
        "В импортозамещённом наборе данных остались некоторые строки с пустыми значениями.\n",
        "\n",
        "Для демонстрации наглядности сначала отфильтруем эти строки."
      ],
      "metadata": {
        "id": "Axr6ZAphDRzu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Проверки импортозамещённой информации\n",
        "# geocoding[geocoding['postcode'].isnull()]\n",
        "empty_rows = Königsberg[pandas.isnull(Königsberg).any(axis=1)];\n",
        "empty_rows"
      ],
      "metadata": {
        "id": "ZQv5rYGH2jpl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Почтовый индекс знатно подпортил всю статистику...\n",
        "\n",
        "Удалим некорректные строки и проверим ещё раз!"
      ],
      "metadata": {
        "id": "gBIByaWw18_J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Удаление пустых значений\n",
        "Königsberg = Königsberg.dropna();\n",
        "Königsberg"
      ],
      "metadata": {
        "id": "9dt443FMDVCq",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "outputId": "fcbb0c85-8463-4a6e-fb96-f6679516e22d"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           price  date  mean_difference    geo_lat    geo_lon settlement_type  \\\n",
              "598570   3000000  2018         -1653577  54.659968  19.915666            town   \n",
              "598607   4900000  2018           246423  54.723534  20.470695            city   \n",
              "598668   3650000  2018         -1003577  54.723444  20.471314            city   \n",
              "599049   1900000  2018         -2753577  54.733997  20.467265            city   \n",
              "599469   1999999  2018         -1895321  54.725452  20.552115            city   \n",
              "...          ...   ...              ...        ...        ...             ...   \n",
              "5475652  2842500  2021         -1052820  54.707470  20.507324            city   \n",
              "5475777  3334600  2021          -560720  54.707470  20.507324            city   \n",
              "5476873  5900000  2021          1246423  54.711222  20.574834            city   \n",
              "5476901  2593200  2021         -1302120  54.707470  20.507324            city   \n",
              "5476929  3372120  2021          -523200  54.707470  20.507324            city   \n",
              "\n",
              "                town postcode  building_type  level  levels  level_part  \\\n",
              "598570      Baltiysk   238527              3      2       2        1.00   \n",
              "598607   Kaliningrad   236022              3      1       3        0.33   \n",
              "598668   Kaliningrad   236022              3      4       5        0.80   \n",
              "599049   Kaliningrad   236023              4      1       5        0.20   \n",
              "599469   Kaliningrad   236038              2      7       9        0.78   \n",
              "...              ...      ...            ...    ...     ...         ...   \n",
              "5475652  Kaliningrad   236060              3      5      10        0.50   \n",
              "5475777  Kaliningrad   236060              3      2      10        0.20   \n",
              "5476873  Kaliningrad   236015              3      9      12        0.75   \n",
              "5476901  Kaliningrad   236060              2      9      10        0.90   \n",
              "5476929  Kaliningrad   236060              2      5      10        0.50   \n",
              "\n",
              "         rooms  area  kitchen_area  object_type  \n",
              "598570       3  84.8          14.5            2  \n",
              "598607       3  79.6           8.9            2  \n",
              "598668       2  61.0          15.2            2  \n",
              "599049       2  44.0           6.0            2  \n",
              "599469       1  50.0          13.0            1  \n",
              "...        ...   ...           ...          ...  \n",
              "5475652      1  38.0          12.3            1  \n",
              "5475777      1  48.0          21.0            1  \n",
              "5476873      2  56.0          10.0            2  \n",
              "5476901      1  43.0           8.6            1  \n",
              "5476929      2  59.0           9.6            1  \n",
              "\n",
              "[36415 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9fbc4287-e58d-42f3-95d4-b6f3032af963\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>mean_difference</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>settlement_type</th>\n",
              "      <th>town</th>\n",
              "      <th>postcode</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>level_part</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>598570</th>\n",
              "      <td>3000000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-1653577</td>\n",
              "      <td>54.659968</td>\n",
              "      <td>19.915666</td>\n",
              "      <td>town</td>\n",
              "      <td>Baltiysk</td>\n",
              "      <td>238527</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>84.8</td>\n",
              "      <td>14.5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598607</th>\n",
              "      <td>4900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>246423</td>\n",
              "      <td>54.723534</td>\n",
              "      <td>20.470695</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236022</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0.33</td>\n",
              "      <td>3</td>\n",
              "      <td>79.6</td>\n",
              "      <td>8.9</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>598668</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-1003577</td>\n",
              "      <td>54.723444</td>\n",
              "      <td>20.471314</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236022</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.80</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>15.2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599049</th>\n",
              "      <td>1900000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-2753577</td>\n",
              "      <td>54.733997</td>\n",
              "      <td>20.467265</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236023</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0.20</td>\n",
              "      <td>2</td>\n",
              "      <td>44.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>599469</th>\n",
              "      <td>1999999</td>\n",
              "      <td>2018</td>\n",
              "      <td>-1895321</td>\n",
              "      <td>54.725452</td>\n",
              "      <td>20.552115</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236038</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>9</td>\n",
              "      <td>0.78</td>\n",
              "      <td>1</td>\n",
              "      <td>50.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475652</th>\n",
              "      <td>2842500</td>\n",
              "      <td>2021</td>\n",
              "      <td>-1052820</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236060</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>1</td>\n",
              "      <td>38.0</td>\n",
              "      <td>12.3</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5475777</th>\n",
              "      <td>3334600</td>\n",
              "      <td>2021</td>\n",
              "      <td>-560720</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236060</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>0.20</td>\n",
              "      <td>1</td>\n",
              "      <td>48.0</td>\n",
              "      <td>21.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476873</th>\n",
              "      <td>5900000</td>\n",
              "      <td>2021</td>\n",
              "      <td>1246423</td>\n",
              "      <td>54.711222</td>\n",
              "      <td>20.574834</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236015</td>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>12</td>\n",
              "      <td>0.75</td>\n",
              "      <td>2</td>\n",
              "      <td>56.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476901</th>\n",
              "      <td>2593200</td>\n",
              "      <td>2021</td>\n",
              "      <td>-1302120</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236060</td>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>0.90</td>\n",
              "      <td>1</td>\n",
              "      <td>43.0</td>\n",
              "      <td>8.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5476929</th>\n",
              "      <td>3372120</td>\n",
              "      <td>2021</td>\n",
              "      <td>-523200</td>\n",
              "      <td>54.707470</td>\n",
              "      <td>20.507324</td>\n",
              "      <td>city</td>\n",
              "      <td>Kaliningrad</td>\n",
              "      <td>236060</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2</td>\n",
              "      <td>59.0</td>\n",
              "      <td>9.6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>36415 rows × 16 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9fbc4287-e58d-42f3-95d4-b6f3032af963')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9fbc4287-e58d-42f3-95d4-b6f3032af963 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9fbc4287-e58d-42f3-95d4-b6f3032af963');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d8b02ffc-34cb-45b0-954e-2ed9bfd816f2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d8b02ffc-34cb-45b0-954e-2ed9bfd816f2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d8b02ffc-34cb-45b0-954e-2ed9bfd816f2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Königsberg",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Проверки импортозамещённой информации\n",
        "# geocoding[geocoding['postcode'].isnull()]\n",
        "empty_rows = Königsberg[pandas.isnull(Königsberg).any(axis=1)];\n",
        "empty_rows"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "RVme3gap2ms3",
        "outputId": "800907ac-d012-48c9-86b4-f6adfa630a40"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [price, date, mean_difference, geo_lat, geo_lon, settlement_type, town, postcode, building_type, level, levels, level_part, rooms, area, kitchen_area, object_type]\n",
              "Index: []"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-407d0990-4ab0-4a73-9c87-162f5406fbaa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>mean_difference</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>settlement_type</th>\n",
              "      <th>town</th>\n",
              "      <th>postcode</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>level_part</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-407d0990-4ab0-4a73-9c87-162f5406fbaa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-407d0990-4ab0-4a73-9c87-162f5406fbaa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-407d0990-4ab0-4a73-9c87-162f5406fbaa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "empty_rows",
              "repr_error": "Out of range float values are not JSON compliant: nan"
            }
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Теперь в датасете нет пустых данных!"
      ],
      "metadata": {
        "id": "biobb3A12vGn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Фрагмент результирующего набора данных\n",
        "\n",
        "Фрагмент результирующего набора данных приведён в получении данных с помощью API, исходный код находится по ссылке на GitHub: [1.2. Конструирование API геокодинга](https://github.com/namespaceStedd/machinelearning/blob/main/1.2.%20Конструирование%20API%20геокодинга). Дополнительная информация находится в пункте \"Загрузка дополнительных данных, обогащающих исходные данные\""
      ],
      "metadata": {
        "id": "sCKd1lKpUsgd"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uRU91U9eUw2H"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Визуализация данных, аналитическая панель\n",
        "\n",
        "Теперь визуализируем зависимости новых полученных данных от стоимости квартиры по порядку."
      ],
      "metadata": {
        "id": "b4aN_8rKTran"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Сначала визуализируем зависимость типа населённого пункта от стоимости."
      ],
      "metadata": {
        "id": "7KMdCYAX3iCO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Построение графика зависимости поля \"settlement_type\" от поля \"price\"\n",
        "plotix(Königsberg, 'settlement_type', 'price', 'bar');"
      ],
      "metadata": {
        "id": "M2zFIa6zUDGe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 773
        },
        "outputId": "29d954e6-49d7-41fb-9817-1144228a172c"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-921c4b1e9fc0>:22: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plot.legend(loc='best', shadow=False, scatterpoints=1);\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Как видно по графику, самые дорогие квартиры располагаются в городах областного значения, менее дорогие - в столице региона Кёнигсберге, затем по стоимости располагается недвижимость в деревнях, и самые низкооцениваемые недвижимости находятся в регионе."
      ],
      "metadata": {
        "id": "8B0DooHX4AMI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Теперь визуализируем график зависимости населённого пункта от стоимости квартиры"
      ],
      "metadata": {
        "id": "AsWPzjvy4emg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Построение графика зависимости поля \"town\" от поля \"price\"\n",
        "plotix(Königsberg, 'town', 'price', 'bar');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 773
        },
        "id": "Lwc0Tk4_4k7g",
        "outputId": "2c0959e5-1bc8-47dd-984a-837914846a8f"
      },
      "execution_count": 113,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-921c4b1e9fc0>:22: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plot.legend(loc='best', shadow=False, scatterpoints=1);\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "График зависимости позволяет оценить, насколько дешевле стоит недвижимость в регионе нежели в городах областного значения."
      ],
      "metadata": {
        "id": "hGnNf4WY42sx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "График зависимости для почтовых индексов имеет смысл строить только для определённых городов. В качестве примера выберем город \"Советск\"..."
      ],
      "metadata": {
        "id": "-1XpQmgM6QDD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Выбор города\n",
        "Ulianovo = Königsberg[Königsberg['town'] == 'Sovetsk'];\n",
        "Ulianovo"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "giZt1QqF3_R-",
        "outputId": "7b7b9cde-3610-4fa3-f68f-61f182eef74a"
      },
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           price  date  mean_difference    geo_lat    geo_lon settlement_type  \\\n",
              "599924   2000000  2018         -2653577  55.069925  21.876269            city   \n",
              "601773   1450000  2018         -3203577  55.079806  21.882477            city   \n",
              "604053   1350000  2018         -3303577  55.079043  21.880780            city   \n",
              "605752   2300000  2018         -2353577  55.080934  21.888611            city   \n",
              "609837   1650000  2018         -3003577  55.078269  21.898873            city   \n",
              "...          ...   ...              ...        ...        ...             ...   \n",
              "4725035  1300000  2020         -3353577  55.071706  21.889141            city   \n",
              "4870800  3650000  2020         -1003577  55.079841  21.878906            city   \n",
              "4967001   800000  2021         -3853577  55.080192  21.893553            city   \n",
              "5061799  1400000  2021         -3253577  55.080192  21.893553            city   \n",
              "5392989  1600000  2021         -3053577  55.071706  21.889141            city   \n",
              "\n",
              "            town postcode  building_type  level  levels  level_part  rooms  \\\n",
              "599924   Sovetsk   238758              1      3       5        0.60      3   \n",
              "601773   Sovetsk   238700              4      4       5        0.80      3   \n",
              "604053   Sovetsk   238700              3      3       3        1.00      2   \n",
              "605752   Sovetsk   238700              3      1       3        0.33      3   \n",
              "609837   Sovetsk   238752              1      4       5        0.80      3   \n",
              "...          ...      ...            ...    ...     ...         ...    ...   \n",
              "4725035  Sovetsk   238758              1      5       5        1.00      3   \n",
              "4870800  Sovetsk   238700              3      2       4        0.50      3   \n",
              "4967001  Sovetsk   238752              3      2       5        0.40      1   \n",
              "5061799  Sovetsk   238752              3      1       5        0.20      2   \n",
              "5392989  Sovetsk   238758              1      2       4        0.50      2   \n",
              "\n",
              "          area  kitchen_area  object_type  \n",
              "599924    62.5           7.6            2  \n",
              "601773    63.0          14.0            2  \n",
              "604053    61.0          13.0            2  \n",
              "605752    88.7           9.8            2  \n",
              "609837    72.0           8.0            2  \n",
              "...        ...           ...          ...  \n",
              "4725035   59.0           6.0            2  \n",
              "4870800  110.0          41.8            2  \n",
              "4967001   26.0           7.0            2  \n",
              "5061799   47.0           7.5            2  \n",
              "5392989   45.0           6.2            2  \n",
              "\n",
              "[68 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9759b90f-5675-4423-be01-ccc409ff6962\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "      <th>date</th>\n",
              "      <th>mean_difference</th>\n",
              "      <th>geo_lat</th>\n",
              "      <th>geo_lon</th>\n",
              "      <th>settlement_type</th>\n",
              "      <th>town</th>\n",
              "      <th>postcode</th>\n",
              "      <th>building_type</th>\n",
              "      <th>level</th>\n",
              "      <th>levels</th>\n",
              "      <th>level_part</th>\n",
              "      <th>rooms</th>\n",
              "      <th>area</th>\n",
              "      <th>kitchen_area</th>\n",
              "      <th>object_type</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>599924</th>\n",
              "      <td>2000000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-2653577</td>\n",
              "      <td>55.069925</td>\n",
              "      <td>21.876269</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238758</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>5</td>\n",
              "      <td>0.60</td>\n",
              "      <td>3</td>\n",
              "      <td>62.5</td>\n",
              "      <td>7.6</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>601773</th>\n",
              "      <td>1450000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-3203577</td>\n",
              "      <td>55.079806</td>\n",
              "      <td>21.882477</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238700</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.80</td>\n",
              "      <td>3</td>\n",
              "      <td>63.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>604053</th>\n",
              "      <td>1350000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-3303577</td>\n",
              "      <td>55.079043</td>\n",
              "      <td>21.880780</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238700</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>1.00</td>\n",
              "      <td>2</td>\n",
              "      <td>61.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>605752</th>\n",
              "      <td>2300000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-2353577</td>\n",
              "      <td>55.080934</td>\n",
              "      <td>21.888611</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238700</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0.33</td>\n",
              "      <td>3</td>\n",
              "      <td>88.7</td>\n",
              "      <td>9.8</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>609837</th>\n",
              "      <td>1650000</td>\n",
              "      <td>2018</td>\n",
              "      <td>-3003577</td>\n",
              "      <td>55.078269</td>\n",
              "      <td>21.898873</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238752</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>0.80</td>\n",
              "      <td>3</td>\n",
              "      <td>72.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4725035</th>\n",
              "      <td>1300000</td>\n",
              "      <td>2020</td>\n",
              "      <td>-3353577</td>\n",
              "      <td>55.071706</td>\n",
              "      <td>21.889141</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238758</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3</td>\n",
              "      <td>59.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4870800</th>\n",
              "      <td>3650000</td>\n",
              "      <td>2020</td>\n",
              "      <td>-1003577</td>\n",
              "      <td>55.079841</td>\n",
              "      <td>21.878906</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238700</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0.50</td>\n",
              "      <td>3</td>\n",
              "      <td>110.0</td>\n",
              "      <td>41.8</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4967001</th>\n",
              "      <td>800000</td>\n",
              "      <td>2021</td>\n",
              "      <td>-3853577</td>\n",
              "      <td>55.080192</td>\n",
              "      <td>21.893553</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238752</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>0.40</td>\n",
              "      <td>1</td>\n",
              "      <td>26.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5061799</th>\n",
              "      <td>1400000</td>\n",
              "      <td>2021</td>\n",
              "      <td>-3253577</td>\n",
              "      <td>55.080192</td>\n",
              "      <td>21.893553</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238752</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0.20</td>\n",
              "      <td>2</td>\n",
              "      <td>47.0</td>\n",
              "      <td>7.5</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5392989</th>\n",
              "      <td>1600000</td>\n",
              "      <td>2021</td>\n",
              "      <td>-3053577</td>\n",
              "      <td>55.071706</td>\n",
              "      <td>21.889141</td>\n",
              "      <td>city</td>\n",
              "      <td>Sovetsk</td>\n",
              "      <td>238758</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>0.50</td>\n",
              "      <td>2</td>\n",
              "      <td>45.0</td>\n",
              "      <td>6.2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>68 rows × 16 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9759b90f-5675-4423-be01-ccc409ff6962')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9759b90f-5675-4423-be01-ccc409ff6962 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9759b90f-5675-4423-be01-ccc409ff6962');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2d0af358-6883-4d78-ab01-c0dfeef58b30\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2d0af358-6883-4d78-ab01-c0dfeef58b30')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2d0af358-6883-4d78-ab01-c0dfeef58b30 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "Ulianovo",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Построение графика зависимости поля \"postcode\" для города \"Sovetsk\" от поля \"price\"\n",
        "plotix(Ulianovo, 'postcode', 'price', 'bar');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 773
        },
        "id": "CGIIzaDY7Ek_",
        "outputId": "067e8072-6a39-476d-f789-0c9663f11419"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-9-921c4b1e9fc0>:22: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plot.legend(loc='best', shadow=False, scatterpoints=1);\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "По визуализированному графику можно понять, что особой зависимости привязанности недвижимости к почтовому индексу от стоимости нет."
      ],
      "metadata": {
        "id": "0NFN1axN7Xpp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Заключение\n",
        "1. **Выполнена такая-то визуализация.** В ходе работы были выполнены графики зависимостей значимых полей от стоимости квартиры.\n",
        "2. **Выполнено обогащение такими-то признаками по таким-то критериям из такого-то источника.** в ходе работы над данными было выполнено два типа работ: обогащение признаками из исходного набора данных - отклонение от средней стоимости квартиры \"mean_difference\" и расположение квартиры относительно всего дома \"level_part\", а также с помощью геокодера от 2GIS были заполнены поля \"settlement_type\" с типами населённых пунктов, \"town\" с названиями населённых пунктов и \"postcode\" с индексами почтовых отделений, привязанных к координатам. **Полученный набор данных может быть использован для решения таких-то задач.** Например, для более глубокого анализа стоимости квартиры на уровне конкретных населённых пунктах.\n",
        "3. **Получены такие-то знания и такие-то практические навыки.** В ходе работы были получены полезные навыки в конструировании признаков на основе имеющихся данных, а также получение признаком с помощью API с использованием парсинга из JSON-формата и дополнительного набора данных.\n"
      ],
      "metadata": {
        "id": "q0qd4IXcSzuh"
      }
    }
  ]
}